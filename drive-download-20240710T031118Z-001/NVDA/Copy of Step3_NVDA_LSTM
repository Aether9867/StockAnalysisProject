{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1GTsaeRb5Duh89LU_RzxFHEE8D1loJ-BB","timestamp":1714017101987},{"file_id":"1YaNyX2hH9xtfrU85OAdPEl53QdcYrn9z","timestamp":1711597675805},{"file_id":"1NSKphG-IJ3tUA-kYCfbf4IwvOWsgk_HC","timestamp":1710386596819},{"file_id":"1aQkZuFfJ-4_XvCVAC06Dz6tFZO-bDVit","timestamp":1709789023599},{"file_id":"1NBtCfRSLB9oZaAusuvgtnl_RfDGs2kvu","timestamp":1707972047499}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"kAFfmzKVEQcR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714018060079,"user_tz":-330,"elapsed":3916,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}},"outputId":"074c442f-fe36-4d5f-a338-cba289a95dd2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# Imports\n","import pandas as pd\n","from statsmodels.tsa.seasonal import seasonal_decompose\n","import matplotlib.pyplot as plt\n","import os"],"metadata":{"id":"6NyRONupEvMY","executionInfo":{"status":"ok","timestamp":1714018064037,"user_tz":-330,"elapsed":575,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["COMPANY = \"NVDA\"\n","train_data= pd.read_csv('/content/drive/Shareddrives/1:1_Krishna_Vijay/Dataset/train_NVDA.csv')\n","test_data=pd.read_csv('/content/drive/Shareddrives/1:1_Krishna_Vijay/Dataset/test_NVDA.csv')"],"metadata":{"id":"-Gf1SHIXLTEW","executionInfo":{"status":"ok","timestamp":1714018066278,"user_tz":-330,"elapsed":4,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yY-JCOeSY66p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","def prepare_seq(data, seq_len):   #eg seq=len = 50\n","  sequences, labels = [], []\n","\n","  #len of data is 1353 then 1353 - 50 is the range\n","  for i in range(len(data) - seq_len):\n","    #e0 to 50\n","    x_temp = data.iloc[i:i+seq_len].values\n","    #stores 50th value\n","    y_temp = data.iloc[i+seq_len].values\n","\n","    sequences.append(x_temp)\n","    labels.append(y_temp)\n","  return np.array (sequences), np.array(labels)"],"metadata":{"id":"c_dEWfbdKENG","executionInfo":{"status":"ok","timestamp":1714018067200,"user_tz":-330,"elapsed":7,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["\n","# define the sequence length\n","SEQ_LENGTH = 50\n","# process the dataset\n","train_sequences, train_labels = prepare_seq(train_data, SEQ_LENGTH)\n","test_sequences, test_labels = prepare_seq(test_data, SEQ_LENGTH)\n","print(train_sequences.shape, test_sequences.shape)"],"metadata":{"id":"DswtjpKjLbfq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714018070647,"user_tz":-330,"elapsed":6,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}},"outputId":"af171e96-317c-4f38-cc2a-b182b97935b9"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["(957, 50, 4) (202, 50, 4)\n"]}]},{"cell_type":"markdown","source":["Model training with LSTM"],"metadata":{"id":"7iINkiKoHLyd"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,LSTM,Dropout\n","from tensorflow.keras.optimizers import Adam\n","\n","# define the learning rate and epochs\n","LR = 0.005\n","EPOCHS = 50\n","\n","# build the model\n","model = Sequential()\n","model.add(LSTM(units=50,return_sequences = True, input_shape=(train_sequences.shape[1],train_sequences.shape[2])))\n","model.add(Dropout(0.1))\n","model.add(LSTM(units = 50))\n","model.add(Dense(4))\n","\n","# compile the model\n","model.compile(optimizer=Adam(learning_rate = LR), loss='mean_squared_error', metrics=['mean_squared_error'])"],"metadata":{"id":"2-pkOjdlHNhg","executionInfo":{"status":"ok","timestamp":1714018077680,"user_tz":-330,"elapsed":5256,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["Train the model"],"metadata":{"id":"22xcLqODHo1D"}},{"cell_type":"code","source":["# train the model\n","model.fit(train_sequences,train_labels, epochs=EPOCHS, validation_data = (test_sequences,test_labels),verbose = 'auto')"],"metadata":{"id":"xKFoNi95Hp0P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714018123917,"user_tz":-330,"elapsed":43518,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}},"outputId":"778a51bd-6991-4558-cdf0-62743bfb6980"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","30/30 [==============================] - 6s 34ms/step - loss: 0.0029 - mean_squared_error: 0.0029 - val_loss: 0.0165 - val_mean_squared_error: 0.0165\n","Epoch 2/50\n","30/30 [==============================] - 0s 13ms/step - loss: 1.4452e-04 - mean_squared_error: 1.4452e-04 - val_loss: 0.0225 - val_mean_squared_error: 0.0225\n","Epoch 3/50\n","30/30 [==============================] - 0s 13ms/step - loss: 1.0181e-04 - mean_squared_error: 1.0181e-04 - val_loss: 0.0158 - val_mean_squared_error: 0.0158\n","Epoch 4/50\n","30/30 [==============================] - 0s 13ms/step - loss: 1.7609e-04 - mean_squared_error: 1.7609e-04 - val_loss: 0.0170 - val_mean_squared_error: 0.0170\n","Epoch 5/50\n","30/30 [==============================] - 0s 15ms/step - loss: 1.0138e-04 - mean_squared_error: 1.0138e-04 - val_loss: 0.0174 - val_mean_squared_error: 0.0174\n","Epoch 6/50\n","30/30 [==============================] - 1s 25ms/step - loss: 9.7144e-05 - mean_squared_error: 9.7144e-05 - val_loss: 0.0148 - val_mean_squared_error: 0.0148\n","Epoch 7/50\n","30/30 [==============================] - 1s 19ms/step - loss: 7.8092e-05 - mean_squared_error: 7.8092e-05 - val_loss: 0.0144 - val_mean_squared_error: 0.0144\n","Epoch 8/50\n","30/30 [==============================] - 1s 19ms/step - loss: 1.0500e-04 - mean_squared_error: 1.0500e-04 - val_loss: 0.0212 - val_mean_squared_error: 0.0212\n","Epoch 9/50\n","30/30 [==============================] - 0s 14ms/step - loss: 1.2514e-04 - mean_squared_error: 1.2514e-04 - val_loss: 0.0188 - val_mean_squared_error: 0.0188\n","Epoch 10/50\n","30/30 [==============================] - 0s 14ms/step - loss: 8.9750e-05 - mean_squared_error: 8.9750e-05 - val_loss: 0.0131 - val_mean_squared_error: 0.0131\n","Epoch 11/50\n","30/30 [==============================] - 0s 9ms/step - loss: 1.1326e-04 - mean_squared_error: 1.1326e-04 - val_loss: 0.0235 - val_mean_squared_error: 0.0235\n","Epoch 12/50\n","30/30 [==============================] - 0s 9ms/step - loss: 1.6826e-04 - mean_squared_error: 1.6826e-04 - val_loss: 0.0227 - val_mean_squared_error: 0.0227\n","Epoch 13/50\n","30/30 [==============================] - 0s 8ms/step - loss: 9.9366e-05 - mean_squared_error: 9.9366e-05 - val_loss: 0.0111 - val_mean_squared_error: 0.0111\n","Epoch 14/50\n","30/30 [==============================] - 0s 8ms/step - loss: 6.4459e-05 - mean_squared_error: 6.4459e-05 - val_loss: 0.0068 - val_mean_squared_error: 0.0068\n","Epoch 15/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.0323e-04 - mean_squared_error: 1.0323e-04 - val_loss: 0.0101 - val_mean_squared_error: 0.0101\n","Epoch 16/50\n","30/30 [==============================] - 0s 10ms/step - loss: 9.9967e-05 - mean_squared_error: 9.9967e-05 - val_loss: 0.0081 - val_mean_squared_error: 0.0081\n","Epoch 17/50\n","30/30 [==============================] - 0s 9ms/step - loss: 7.8813e-05 - mean_squared_error: 7.8813e-05 - val_loss: 0.0075 - val_mean_squared_error: 0.0075\n","Epoch 18/50\n","30/30 [==============================] - 0s 8ms/step - loss: 7.0404e-05 - mean_squared_error: 7.0404e-05 - val_loss: 0.0099 - val_mean_squared_error: 0.0099\n","Epoch 19/50\n","30/30 [==============================] - 0s 8ms/step - loss: 4.9333e-05 - mean_squared_error: 4.9333e-05 - val_loss: 0.0116 - val_mean_squared_error: 0.0116\n","Epoch 20/50\n","30/30 [==============================] - 0s 8ms/step - loss: 8.2189e-05 - mean_squared_error: 8.2189e-05 - val_loss: 0.0201 - val_mean_squared_error: 0.0201\n","Epoch 21/50\n","30/30 [==============================] - 0s 9ms/step - loss: 7.1559e-05 - mean_squared_error: 7.1559e-05 - val_loss: 0.0170 - val_mean_squared_error: 0.0170\n","Epoch 22/50\n","30/30 [==============================] - 0s 9ms/step - loss: 6.1421e-05 - mean_squared_error: 6.1421e-05 - val_loss: 0.0155 - val_mean_squared_error: 0.0155\n","Epoch 23/50\n","30/30 [==============================] - 0s 12ms/step - loss: 7.6473e-05 - mean_squared_error: 7.6473e-05 - val_loss: 0.0073 - val_mean_squared_error: 0.0073\n","Epoch 24/50\n","30/30 [==============================] - 0s 14ms/step - loss: 6.4692e-05 - mean_squared_error: 6.4692e-05 - val_loss: 0.0127 - val_mean_squared_error: 0.0127\n","Epoch 25/50\n","30/30 [==============================] - 0s 13ms/step - loss: 7.4619e-05 - mean_squared_error: 7.4619e-05 - val_loss: 0.0099 - val_mean_squared_error: 0.0099\n","Epoch 26/50\n","30/30 [==============================] - 1s 21ms/step - loss: 5.6883e-05 - mean_squared_error: 5.6883e-05 - val_loss: 0.0185 - val_mean_squared_error: 0.0185\n","Epoch 27/50\n","30/30 [==============================] - 1s 18ms/step - loss: 6.0573e-05 - mean_squared_error: 6.0573e-05 - val_loss: 0.0144 - val_mean_squared_error: 0.0144\n","Epoch 28/50\n","30/30 [==============================] - 1s 24ms/step - loss: 7.0483e-05 - mean_squared_error: 7.0483e-05 - val_loss: 0.0122 - val_mean_squared_error: 0.0122\n","Epoch 29/50\n","30/30 [==============================] - 0s 15ms/step - loss: 7.7025e-05 - mean_squared_error: 7.7025e-05 - val_loss: 0.0091 - val_mean_squared_error: 0.0091\n","Epoch 30/50\n","30/30 [==============================] - 0s 17ms/step - loss: 4.8713e-05 - mean_squared_error: 4.8713e-05 - val_loss: 0.0106 - val_mean_squared_error: 0.0106\n","Epoch 31/50\n","30/30 [==============================] - 0s 16ms/step - loss: 4.3242e-05 - mean_squared_error: 4.3242e-05 - val_loss: 0.0162 - val_mean_squared_error: 0.0162\n","Epoch 32/50\n","30/30 [==============================] - 0s 12ms/step - loss: 4.8075e-05 - mean_squared_error: 4.8075e-05 - val_loss: 0.0152 - val_mean_squared_error: 0.0152\n","Epoch 33/50\n","30/30 [==============================] - 0s 16ms/step - loss: 5.5690e-05 - mean_squared_error: 5.5690e-05 - val_loss: 0.0186 - val_mean_squared_error: 0.0186\n","Epoch 34/50\n","30/30 [==============================] - 1s 17ms/step - loss: 6.5828e-05 - mean_squared_error: 6.5828e-05 - val_loss: 0.0147 - val_mean_squared_error: 0.0147\n","Epoch 35/50\n","30/30 [==============================] - 0s 12ms/step - loss: 8.0268e-05 - mean_squared_error: 8.0268e-05 - val_loss: 0.0340 - val_mean_squared_error: 0.0340\n","Epoch 36/50\n","30/30 [==============================] - 0s 12ms/step - loss: 8.5327e-05 - mean_squared_error: 8.5327e-05 - val_loss: 0.0124 - val_mean_squared_error: 0.0124\n","Epoch 37/50\n","30/30 [==============================] - 0s 12ms/step - loss: 4.7451e-05 - mean_squared_error: 4.7451e-05 - val_loss: 0.0178 - val_mean_squared_error: 0.0178\n","Epoch 38/50\n","30/30 [==============================] - 0s 15ms/step - loss: 4.9068e-05 - mean_squared_error: 4.9068e-05 - val_loss: 0.0180 - val_mean_squared_error: 0.0180\n","Epoch 39/50\n","30/30 [==============================] - 1s 19ms/step - loss: 4.1469e-05 - mean_squared_error: 4.1469e-05 - val_loss: 0.0161 - val_mean_squared_error: 0.0161\n","Epoch 40/50\n","30/30 [==============================] - 1s 18ms/step - loss: 4.8673e-05 - mean_squared_error: 4.8673e-05 - val_loss: 0.0160 - val_mean_squared_error: 0.0160\n","Epoch 41/50\n","30/30 [==============================] - 1s 21ms/step - loss: 5.1346e-05 - mean_squared_error: 5.1346e-05 - val_loss: 0.0094 - val_mean_squared_error: 0.0094\n","Epoch 42/50\n","30/30 [==============================] - 0s 12ms/step - loss: 4.4734e-05 - mean_squared_error: 4.4734e-05 - val_loss: 0.0125 - val_mean_squared_error: 0.0125\n","Epoch 43/50\n","30/30 [==============================] - 0s 10ms/step - loss: 5.0582e-05 - mean_squared_error: 5.0582e-05 - val_loss: 0.0137 - val_mean_squared_error: 0.0137\n","Epoch 44/50\n","30/30 [==============================] - 0s 10ms/step - loss: 5.1174e-05 - mean_squared_error: 5.1174e-05 - val_loss: 0.0178 - val_mean_squared_error: 0.0178\n","Epoch 45/50\n","30/30 [==============================] - 0s 9ms/step - loss: 4.1671e-05 - mean_squared_error: 4.1671e-05 - val_loss: 0.0196 - val_mean_squared_error: 0.0196\n","Epoch 46/50\n","30/30 [==============================] - 0s 9ms/step - loss: 3.5215e-05 - mean_squared_error: 3.5215e-05 - val_loss: 0.0094 - val_mean_squared_error: 0.0094\n","Epoch 47/50\n","30/30 [==============================] - 0s 8ms/step - loss: 4.1608e-05 - mean_squared_error: 4.1608e-05 - val_loss: 0.0195 - val_mean_squared_error: 0.0195\n","Epoch 48/50\n","30/30 [==============================] - 0s 9ms/step - loss: 4.1435e-05 - mean_squared_error: 4.1435e-05 - val_loss: 0.0193 - val_mean_squared_error: 0.0193\n","Epoch 49/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.8902e-05 - mean_squared_error: 4.8902e-05 - val_loss: 0.0187 - val_mean_squared_error: 0.0187\n","Epoch 50/50\n","30/30 [==============================] - 0s 8ms/step - loss: 7.0674e-05 - mean_squared_error: 7.0674e-05 - val_loss: 0.0148 - val_mean_squared_error: 0.0148\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7d4ed00cc3d0>"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["Saving best model\n"],"metadata":{"id":"NPQgBvZalY8_"}},{"cell_type":"code","source":["SAVE = True\n","LSTM_MODEL_PATH = \"/content/drive/Shareddrives/1:1_Krishna_Vijay/Results/\"\n","\n","# save the model if needed\n","if SAVE:\n","    model.save(os.path.join(LSTM_MODEL_PATH, f\"best_model_{COMPANY}.h5\"))\n","    print(\"Model is saved\")"],"metadata":{"id":"VbtqG0m6ktZ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714019170914,"user_tz":-330,"elapsed":729,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}},"outputId":"ac4eec43-a9e4-4510-9f5c-94145a30b2f5"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Model is saved\n"]}]},{"cell_type":"code","source":["SAVE = True\n","LSTM_MODEL_PATH = \"/content/drive/Shareddrives/ResearchPrograms/TimeSeriesProject/MultiCompanyStocks/Models\"\n","\n","# save the model if needed\n","if SAVE:\n","    model.save(\"/content/drive/Shareddrives/1:1_Krishna_Vijay/Results/Models/LSTM_NVDA.h5\")\n","    #model.save(os.path.join(LSTM_MODEL_PATH, f\"best_model_{COMPANY}.h5\"))\n","    print(\"Model is saved\")"],"metadata":{"id":"rzCmxjmhkIZu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714019103335,"user_tz":-330,"elapsed":562,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}},"outputId":"b8a228d5-4007-4204-b6a2-be103ed93bda"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Model is saved\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"code","source":["# make predictions\n","from sklearn.preprocessing import StandardScaler\n","\n","# Create a StandardScaler object\n","scaler = StandardScaler()\n","predictions = model.predict(test_sequences)\n","# inverse tranform the predictions\n","inverse_predictions = scaler.inverse_transform(predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"wFTDgcF_b0VA","executionInfo":{"status":"error","timestamp":1714019181057,"user_tz":-330,"elapsed":563,"user":{"displayName":"Pallavi Bajpai","userId":"04718665394273084594"}},"outputId":"8e46b6ee-6ce8-4f5e-af0d-e92c14b8b82f"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["7/7 [==============================] - 0s 4ms/step\n"]},{"output_type":"error","ename":"NotFittedError","evalue":"This StandardScaler instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotFittedError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-27a90d0b6e9b>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_sequences\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# inverse tranform the predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0minverse_predictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36minverse_transform\u001b[0;34m(self, X, copy)\u001b[0m\n\u001b[1;32m   1029\u001b[0m             \u001b[0mTransformed\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1030\u001b[0m         \"\"\"\n\u001b[0;32m-> 1031\u001b[0;31m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1032\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1033\u001b[0m         \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_is_fitted\u001b[0;34m(estimator, attributes, msg, all_or_any)\u001b[0m\n\u001b[1;32m   1388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1389\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mfitted\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1390\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mNotFittedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1391\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotFittedError\u001b[0m: This StandardScaler instance is not fitted yet. Call 'fit' with appropriate arguments before using this estimator."]}]},{"cell_type":"code","source":["# create a dataframe frame using model predictions\n","PRED_COLUMNS = ['open_predicted','high_predicted','low_predicted','close_predicted']\n","# create the dataframe\n","pred_df = pd.concat([df.iloc[-predictions.shape[0]:], pd.DataFrame(inverse_predictions, columns = PRED_COLUMNS, index = df.iloc[-predictions.shape[0]:].index)], axis = 1)\n","pred_df[COLUMNS] = scaler.inverse_transform(pred_df[COLUMNS])\n","pred_df.head()"],"metadata":{"id":"zYQsZ_HLb1UJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","\n","def evaluations(cols, dataframe = pred_df):\n","    for column in cols:\n","        print(\"{}\".format(column))\n","        pred_col = column.lower() + \"_predicted\"\n","        mse = mean_squared_error(dataframe[column].values, dataframe[pred_col].values)\n","        print(\"Max and Min: {} and {}\".format(dataframe[column].max(), dataframe[column].min()))\n","        print(\"MSE:\", mse)\n","        print(\"RMSE:{}\\n\".format(np.sqrt(mse)))\n","\n","        plt.figure(figsize = (10,6))\n","        plt.plot(dataframe[column], label = \"actual\")\n","        plt.plot(dataframe[pred_col], label = \"predicted\")\n","        plt.xlabel(\"Time\")\n","        plt.ylabel(f\"Actual and Predicted:{column}\")\n","        plt.title(f\"Actual and Predictions Comparison: {column}\")\n","        plt.legend(loc=\"best\")\n","        plt.grid(True)\n","        plt.show()\n","        print(\"\\n\\n\")"],"metadata":{"id":"ABnKEKtCRJO0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# make evaluations\n","evaluations(COLUMNS)"],"metadata":{"id":"_DPeIfE-kMSv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"k8S1u5alkOoV"},"execution_count":null,"outputs":[]}]}