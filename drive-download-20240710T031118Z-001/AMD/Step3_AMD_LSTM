{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1YaNyX2hH9xtfrU85OAdPEl53QdcYrn9z","timestamp":1711597675805},{"file_id":"1NSKphG-IJ3tUA-kYCfbf4IwvOWsgk_HC","timestamp":1710386596819},{"file_id":"1aQkZuFfJ-4_XvCVAC06Dz6tFZO-bDVit","timestamp":1709789023599},{"file_id":"1NBtCfRSLB9oZaAusuvgtnl_RfDGs2kvu","timestamp":1707972047499}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kAFfmzKVEQcR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715831792856,"user_tz":420,"elapsed":18666,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"dbdb9894-e9df-43ca-852d-225477ec08a7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# Imports\n","import pandas as pd\n","from statsmodels.tsa.seasonal import seasonal_decompose\n","import matplotlib.pyplot as plt\n","import os"],"metadata":{"id":"6NyRONupEvMY","executionInfo":{"status":"ok","timestamp":1715831794414,"user_tz":420,"elapsed":1562,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["COMPANY = \"AMD\"\n","train_data= pd.read_csv('/content/drive/Shareddrives/1:1_Krishna_Vijay/Dataset/train_AMD.csv')\n","test_data=pd.read_csv('/content/drive/Shareddrives/1:1_Krishna_Vijay/Dataset/test_AMD.csv')"],"metadata":{"id":"-Gf1SHIXLTEW","executionInfo":{"status":"ok","timestamp":1715831795631,"user_tz":420,"elapsed":1220,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","def prepare_seq(data, seq_len):   #eg seq=len = 50\n","  sequences, labels = [], []\n","\n","  #len of data is 1353 then 1353 - 50 is the range\n","  for i in range(len(data) - seq_len):\n","    #e0 to 50\n","    x_temp = data.iloc[i:i+seq_len].values\n","    #stores 50th value\n","    y_temp = data.iloc[i+seq_len].values\n","\n","    sequences.append(x_temp)\n","    labels.append(y_temp)\n","  return np.array (sequences), np.array(labels)"],"metadata":{"id":"c_dEWfbdKENG","executionInfo":{"status":"ok","timestamp":1715831795632,"user_tz":420,"elapsed":3,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["\n","# define the sequence length\n","SEQ_LENGTH = 50\n","# process the dataset\n","train_sequences, train_labels = prepare_seq(train_data, SEQ_LENGTH)\n","test_sequences, test_labels = prepare_seq(test_data, SEQ_LENGTH)\n","print(train_sequences.shape, test_sequences.shape)"],"metadata":{"id":"DswtjpKjLbfq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715831796106,"user_tz":420,"elapsed":477,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"7a7a6118-04fa-44db-cbbe-500fbc0431bf"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["(957, 50, 4) (202, 50, 4)\n"]}]},{"cell_type":"markdown","source":["Model training with LSTM"],"metadata":{"id":"7iINkiKoHLyd"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,LSTM,Dropout\n","from tensorflow.keras.optimizers import Adam\n","\n","# define the learning rate and epochs\n","LR = 0.005\n","EPOCHS = 50\n","\n","# build the model\n","model = Sequential()\n","model.add(LSTM(units=50,return_sequences = True, input_shape=(train_sequences.shape[1],train_sequences.shape[2])))\n","model.add(Dropout(0.1))\n","model.add(LSTM(units = 50))\n","model.add(Dense(4))\n","\n","# compile the model\n","model.compile(optimizer=Adam(learning_rate = LR), loss='mean_squared_error', metrics=['mean_squared_error'])"],"metadata":{"id":"2-pkOjdlHNhg","executionInfo":{"status":"ok","timestamp":1715831802339,"user_tz":420,"elapsed":6236,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"t6miSqoZg2pr","executionInfo":{"status":"ok","timestamp":1715831802340,"user_tz":420,"elapsed":5,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Train the model"],"metadata":{"id":"22xcLqODHo1D"}},{"cell_type":"code","source":["# train the model\n","model.fit(train_sequences,train_labels, epochs=EPOCHS, validation_data = (test_sequences,test_labels),verbose = 'auto')"],"metadata":{"id":"xKFoNi95Hp0P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715831846469,"user_tz":420,"elapsed":44133,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"70e11051-613d-43f2-9531-b48586b5eae1"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","30/30 [==============================] - 7s 39ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - val_loss: 0.0050 - val_mean_squared_error: 0.0050\n","Epoch 2/50\n","30/30 [==============================] - 0s 11ms/step - loss: 8.9225e-04 - mean_squared_error: 8.9225e-04 - val_loss: 0.0054 - val_mean_squared_error: 0.0054\n","Epoch 3/50\n","30/30 [==============================] - 0s 11ms/step - loss: 8.0095e-04 - mean_squared_error: 8.0095e-04 - val_loss: 0.0041 - val_mean_squared_error: 0.0041\n","Epoch 4/50\n","30/30 [==============================] - 0s 10ms/step - loss: 6.7108e-04 - mean_squared_error: 6.7108e-04 - val_loss: 0.0035 - val_mean_squared_error: 0.0035\n","Epoch 5/50\n","30/30 [==============================] - 0s 11ms/step - loss: 5.8569e-04 - mean_squared_error: 5.8569e-04 - val_loss: 0.0028 - val_mean_squared_error: 0.0028\n","Epoch 6/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.1547e-04 - mean_squared_error: 4.1547e-04 - val_loss: 0.0040 - val_mean_squared_error: 0.0040\n","Epoch 7/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.3548e-04 - mean_squared_error: 4.3548e-04 - val_loss: 0.0027 - val_mean_squared_error: 0.0027\n","Epoch 8/50\n","30/30 [==============================] - 0s 10ms/step - loss: 5.0304e-04 - mean_squared_error: 5.0304e-04 - val_loss: 0.0034 - val_mean_squared_error: 0.0034\n","Epoch 9/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.7561e-04 - mean_squared_error: 4.7561e-04 - val_loss: 0.0026 - val_mean_squared_error: 0.0026\n","Epoch 10/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.5404e-04 - mean_squared_error: 4.5404e-04 - val_loss: 0.0019 - val_mean_squared_error: 0.0019\n","Epoch 11/50\n","30/30 [==============================] - 0s 14ms/step - loss: 3.7861e-04 - mean_squared_error: 3.7861e-04 - val_loss: 0.0037 - val_mean_squared_error: 0.0037\n","Epoch 12/50\n","30/30 [==============================] - 0s 15ms/step - loss: 3.0375e-04 - mean_squared_error: 3.0375e-04 - val_loss: 0.0015 - val_mean_squared_error: 0.0015\n","Epoch 13/50\n","30/30 [==============================] - 0s 15ms/step - loss: 3.1690e-04 - mean_squared_error: 3.1690e-04 - val_loss: 0.0018 - val_mean_squared_error: 0.0018\n","Epoch 14/50\n","30/30 [==============================] - 0s 14ms/step - loss: 3.4672e-04 - mean_squared_error: 3.4672e-04 - val_loss: 0.0262 - val_mean_squared_error: 0.0262\n","Epoch 15/50\n","30/30 [==============================] - 0s 14ms/step - loss: 7.8321e-04 - mean_squared_error: 7.8321e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 16/50\n","30/30 [==============================] - 0s 14ms/step - loss: 2.8914e-04 - mean_squared_error: 2.8914e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 17/50\n","30/30 [==============================] - 0s 15ms/step - loss: 2.6660e-04 - mean_squared_error: 2.6660e-04 - val_loss: 0.0036 - val_mean_squared_error: 0.0036\n","Epoch 18/50\n","30/30 [==============================] - 0s 15ms/step - loss: 3.2401e-04 - mean_squared_error: 3.2401e-04 - val_loss: 0.0011 - val_mean_squared_error: 0.0011\n","Epoch 19/50\n","30/30 [==============================] - 0s 14ms/step - loss: 3.1467e-04 - mean_squared_error: 3.1467e-04 - val_loss: 0.0080 - val_mean_squared_error: 0.0080\n","Epoch 20/50\n","30/30 [==============================] - 0s 15ms/step - loss: 2.9303e-04 - mean_squared_error: 2.9303e-04 - val_loss: 0.0012 - val_mean_squared_error: 0.0012\n","Epoch 21/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.4631e-04 - mean_squared_error: 2.4631e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 22/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.8671e-04 - mean_squared_error: 2.8671e-04 - val_loss: 9.5965e-04 - val_mean_squared_error: 9.5965e-04\n","Epoch 23/50\n","30/30 [==============================] - 0s 10ms/step - loss: 3.0125e-04 - mean_squared_error: 3.0125e-04 - val_loss: 0.0010 - val_mean_squared_error: 0.0010\n","Epoch 24/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.4353e-04 - mean_squared_error: 2.4353e-04 - val_loss: 9.7060e-04 - val_mean_squared_error: 9.7060e-04\n","Epoch 25/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.3248e-04 - mean_squared_error: 2.3248e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 26/50\n","30/30 [==============================] - 0s 9ms/step - loss: 2.9801e-04 - mean_squared_error: 2.9801e-04 - val_loss: 0.0016 - val_mean_squared_error: 0.0016\n","Epoch 27/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.6929e-04 - mean_squared_error: 2.6929e-04 - val_loss: 8.8448e-04 - val_mean_squared_error: 8.8448e-04\n","Epoch 28/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.1112e-04 - mean_squared_error: 2.1112e-04 - val_loss: 9.0728e-04 - val_mean_squared_error: 9.0728e-04\n","Epoch 29/50\n","30/30 [==============================] - 0s 14ms/step - loss: 2.6230e-04 - mean_squared_error: 2.6230e-04 - val_loss: 9.7341e-04 - val_mean_squared_error: 9.7341e-04\n","Epoch 30/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.3151e-04 - mean_squared_error: 2.3151e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 31/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.1738e-04 - mean_squared_error: 2.1738e-04 - val_loss: 8.9301e-04 - val_mean_squared_error: 8.9301e-04\n","Epoch 32/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.3959e-04 - mean_squared_error: 2.3959e-04 - val_loss: 0.0043 - val_mean_squared_error: 0.0043\n","Epoch 33/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.3565e-04 - mean_squared_error: 2.3565e-04 - val_loss: 0.0016 - val_mean_squared_error: 0.0016\n","Epoch 34/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.6544e-04 - mean_squared_error: 2.6544e-04 - val_loss: 8.6609e-04 - val_mean_squared_error: 8.6609e-04\n","Epoch 35/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.7219e-04 - mean_squared_error: 1.7219e-04 - val_loss: 8.9603e-04 - val_mean_squared_error: 8.9603e-04\n","Epoch 36/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.9846e-04 - mean_squared_error: 1.9846e-04 - val_loss: 0.0010 - val_mean_squared_error: 0.0010\n","Epoch 37/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.0399e-04 - mean_squared_error: 2.0399e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 38/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.9472e-04 - mean_squared_error: 1.9472e-04 - val_loss: 0.0010 - val_mean_squared_error: 0.0010\n","Epoch 39/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.8351e-04 - mean_squared_error: 1.8351e-04 - val_loss: 8.9437e-04 - val_mean_squared_error: 8.9437e-04\n","Epoch 40/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.0672e-04 - mean_squared_error: 2.0672e-04 - val_loss: 9.1008e-04 - val_mean_squared_error: 9.1008e-04\n","Epoch 41/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.3554e-04 - mean_squared_error: 2.3554e-04 - val_loss: 0.0010 - val_mean_squared_error: 0.0010\n","Epoch 42/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.2633e-04 - mean_squared_error: 2.2633e-04 - val_loss: 0.0024 - val_mean_squared_error: 0.0024\n","Epoch 43/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.0071e-04 - mean_squared_error: 2.0071e-04 - val_loss: 0.0015 - val_mean_squared_error: 0.0015\n","Epoch 44/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.4583e-04 - mean_squared_error: 2.4583e-04 - val_loss: 9.5353e-04 - val_mean_squared_error: 9.5353e-04\n","Epoch 45/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.4597e-04 - mean_squared_error: 2.4597e-04 - val_loss: 9.2048e-04 - val_mean_squared_error: 9.2048e-04\n","Epoch 46/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.0024e-04 - mean_squared_error: 2.0024e-04 - val_loss: 9.9247e-04 - val_mean_squared_error: 9.9247e-04\n","Epoch 47/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.9574e-04 - mean_squared_error: 1.9574e-04 - val_loss: 0.0010 - val_mean_squared_error: 0.0010\n","Epoch 48/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.9291e-04 - mean_squared_error: 1.9291e-04 - val_loss: 0.0016 - val_mean_squared_error: 0.0016\n","Epoch 49/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.7561e-04 - mean_squared_error: 2.7561e-04 - val_loss: 0.0011 - val_mean_squared_error: 0.0011\n","Epoch 50/50\n","30/30 [==============================] - 0s 9ms/step - loss: 1.8470e-04 - mean_squared_error: 1.8470e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x79ccfc722260>"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["Make predictions on data set\n"],"metadata":{"id":"NPQgBvZalY8_"}},{"cell_type":"code","source":["SAVE = True\n","LSTM_MODEL_PATH = \"/content/drive/Shareddrives/1:1_Krishna_Vijay/Results/\"\n","\n","# save the model if needed\n","if SAVE:\n","    model.save(os.path.join(LSTM_MODEL_PATH, f\"best_model_{COMPANY}.h5\"))\n","    print(\"Model is saved\")"],"metadata":{"id":"VbtqG0m6ktZ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715831846839,"user_tz":420,"elapsed":383,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"3331d99d-3e9e-4b45-a17f-c2d418f933fa"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]},{"output_type":"stream","name":"stdout","text":["Model is saved\n"]}]},{"cell_type":"markdown","source":["End of training\n"],"metadata":{"id":"3T86D3-2hyQZ"}},{"cell_type":"code","source":["\"\"\"# make predictions\n","predictions = model.predict(test_sequences)\n","# inverse tranform the predictions\n","inverse_predictions = scaler.inverse_transform(predictions)\"\"\""],"metadata":{"id":"zUUxEpT6lUNs","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1715831846840,"user_tz":420,"elapsed":10,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"dd0d0d2f-b764-43d8-eef3-4614c596fe49"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'# make predictions\\npredictions = model.predict(test_sequences)\\n# inverse tranform the predictions\\ninverse_predictions = scaler.inverse_transform(predictions)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["\"\"\"# create a dataframe frame using model predictions\n","PRED_COLUMNS = ['open_predicted','high_predicted','low_predicted','close_predicted']\n","# create the dataframe\n","pred_df = pd.concat([df.iloc[-predictions.shape[0]:], pd.DataFrame(inverse_predictions, columns = PRED_COLUMNS, index = df.iloc[-predictions.shape[0]:].index)], axis = 1)\n","pred_df[COLUMNS] = scaler.inverse_transform(pred_df[COLUMNS])\n","pred_df.head()\"\"\""],"metadata":{"id":"ABnKEKtCRJO0","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1715831846840,"user_tz":420,"elapsed":9,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"670c78a8-aa2a-4308-e5c6-718de5cffbe2"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"# create a dataframe frame using model predictions\\nPRED_COLUMNS = ['open_predicted','high_predicted','low_predicted','close_predicted']\\n# create the dataframe\\npred_df = pd.concat([df.iloc[-predictions.shape[0]:], pd.DataFrame(inverse_predictions, columns = PRED_COLUMNS, index = df.iloc[-predictions.shape[0]:].index)], axis = 1)\\npred_df[COLUMNS] = scaler.inverse_transform(pred_df[COLUMNS])\\npred_df.head()\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["\"\"\"from sklearn.metrics import mean_squared_error\n","\n","def evaluations(cols, dataframe = pred_df):\n","    for column in cols:\n","        print(\"{}\".format(column))\n","        pred_col = column.lower() + \"_predicted\"\n","        mse = mean_squared_error(dataframe[column].values, dataframe[pred_col].values)\n","        print(\"Max and Min: {} and {}\".format(dataframe[column].max(), dataframe[column].min()))\n","        print(\"MSE:\", mse)\n","        print(\"RMSE:{}\\n\".format(np.sqrt(mse)))\n","\n","        plt.figure(figsize = (10,6))\n","        plt.plot(dataframe[column], label = \"actual\")\n","        plt.plot(dataframe[pred_col], label = \"predicted\")\n","        plt.xlabel(\"Time\")\n","        plt.ylabel(f\"Actual and Predicted:{column}\")\n","        plt.title(f\"Actual and Predictions Comparison: {column}\")\n","        plt.legend(loc=\"best\")\n","        plt.grid(True)\n","        plt.show()\n","        print(\"\\n\\n\")\"\"\""],"metadata":{"id":"chV2QKKzlXvC","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1715831846840,"user_tz":420,"elapsed":8,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"5f3db80f-44cb-4a53-a8f1-86a07d6f96e9"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'from sklearn.metrics import mean_squared_error\\n\\ndef evaluations(cols, dataframe = pred_df):\\n    for column in cols:\\n        print(\"{}\".format(column))\\n        pred_col = column.lower() + \"_predicted\"\\n        mse = mean_squared_error(dataframe[column].values, dataframe[pred_col].values)\\n        print(\"Max and Min: {} and {}\".format(dataframe[column].max(), dataframe[column].min()))\\n        print(\"MSE:\", mse)\\n        print(\"RMSE:{}\\n\".format(np.sqrt(mse)))\\n\\n        plt.figure(figsize = (10,6))\\n        plt.plot(dataframe[column], label = \"actual\")\\n        plt.plot(dataframe[pred_col], label = \"predicted\")\\n        plt.xlabel(\"Time\")\\n        plt.ylabel(f\"Actual and Predicted:{column}\")\\n        plt.title(f\"Actual and Predictions Comparison: {column}\")\\n        plt.legend(loc=\"best\")\\n        plt.grid(True)\\n        plt.show()\\n        print(\"\\n\\n\")'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["\"\"\"# make evaluations\n","evaluations(COLUMNS)\"\"\""],"metadata":{"id":"c0voTeA_lZ_J","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1715831846840,"user_tz":420,"elapsed":8,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"022c2a9a-d2dd-406e-f151-44da4dbba49c"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'# make evaluations\\nevaluations(COLUMNS)'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}]}]}