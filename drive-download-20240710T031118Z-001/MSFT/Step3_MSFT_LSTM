{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1YaNyX2hH9xtfrU85OAdPEl53QdcYrn9z","timestamp":1711597675805},{"file_id":"1NSKphG-IJ3tUA-kYCfbf4IwvOWsgk_HC","timestamp":1710386596819},{"file_id":"1aQkZuFfJ-4_XvCVAC06Dz6tFZO-bDVit","timestamp":1709789023599},{"file_id":"1NBtCfRSLB9oZaAusuvgtnl_RfDGs2kvu","timestamp":1707972047499}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"kAFfmzKVEQcR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715832106388,"user_tz":420,"elapsed":66492,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"361d1a27-1b60-4ca4-ccd9-9d86d902422c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# Imports\n","import pandas as pd\n","from statsmodels.tsa.seasonal import seasonal_decompose\n","import matplotlib.pyplot as plt\n","import os"],"metadata":{"id":"6NyRONupEvMY","executionInfo":{"status":"ok","timestamp":1715832107817,"user_tz":420,"elapsed":1433,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["COMPANY = \"MSFT\"\n","train_data= pd.read_csv('/content/drive/Shareddrives/1:1_Krishna_Vijay/Dataset/train_MSFT.csv')\n","test_data=pd.read_csv('/content/drive/Shareddrives/1:1_Krishna_Vijay/Dataset/test_MSFT.csv')"],"metadata":{"id":"-Gf1SHIXLTEW","executionInfo":{"status":"ok","timestamp":1715832109283,"user_tz":420,"elapsed":1470,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","def prepare_seq(data, seq_len):   #eg seq=len = 50\n","  sequences, labels = [], []\n","\n","  #len of data is 1353 then 1353 - 50 is the range\n","  for i in range(len(data) - seq_len):\n","    #e0 to 50\n","    x_temp = data.iloc[i:i+seq_len].values\n","    #stores 50th value\n","    y_temp = data.iloc[i+seq_len].values\n","\n","    sequences.append(x_temp)\n","    labels.append(y_temp)\n","  return np.array (sequences), np.array(labels)"],"metadata":{"id":"c_dEWfbdKENG","executionInfo":{"status":"ok","timestamp":1715832109283,"user_tz":420,"elapsed":6,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["\n","# define the sequence length\n","SEQ_LENGTH = 50\n","# process the dataset\n","train_sequences, train_labels = prepare_seq(train_data, SEQ_LENGTH)\n","test_sequences, test_labels = prepare_seq(test_data, SEQ_LENGTH)\n","print(train_sequences.shape, test_sequences.shape)"],"metadata":{"id":"DswtjpKjLbfq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715832109283,"user_tz":420,"elapsed":5,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"0f2d5431-83ac-404c-8add-ca212ac68b92"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["(957, 50, 4) (202, 50, 4)\n"]}]},{"cell_type":"markdown","source":["Model training with LSTM"],"metadata":{"id":"7iINkiKoHLyd"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,LSTM,Dropout\n","from tensorflow.keras.optimizers import Adam\n","\n","# define the learning rate and epochs\n","LR = 0.005\n","EPOCHS = 50\n","\n","# build the model\n","model = Sequential()\n","model.add(LSTM(units=50,return_sequences = True, input_shape=(train_sequences.shape[1],train_sequences.shape[2])))\n","model.add(Dropout(0.1))\n","model.add(LSTM(units = 50))\n","model.add(Dense(4))\n","\n","# compile the model\n","model.compile(optimizer=Adam(learning_rate = LR), loss='mean_squared_error', metrics=['mean_squared_error'])"],"metadata":{"id":"2-pkOjdlHNhg","executionInfo":{"status":"ok","timestamp":1715832114506,"user_tz":420,"elapsed":5227,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"t6miSqoZg2pr","executionInfo":{"status":"ok","timestamp":1715832114508,"user_tz":420,"elapsed":13,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Train the model"],"metadata":{"id":"22xcLqODHo1D"}},{"cell_type":"code","source":["# train the model\n","model.fit(train_sequences,train_labels, epochs=EPOCHS, validation_data = (test_sequences,test_labels),verbose = 'auto')"],"metadata":{"id":"xKFoNi95Hp0P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715832139570,"user_tz":420,"elapsed":25074,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"dd3acf63-4e3a-41df-e50a-f78ebacdf185"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","30/30 [==============================] - 8s 37ms/step - loss: 0.0077 - mean_squared_error: 0.0077 - val_loss: 0.0055 - val_mean_squared_error: 0.0055\n","Epoch 2/50\n","30/30 [==============================] - 0s 12ms/step - loss: 5.4798e-04 - mean_squared_error: 5.4798e-04 - val_loss: 0.0028 - val_mean_squared_error: 0.0028\n","Epoch 3/50\n","30/30 [==============================] - 0s 11ms/step - loss: 4.5454e-04 - mean_squared_error: 4.5454e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 4/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.4197e-04 - mean_squared_error: 4.4197e-04 - val_loss: 0.0022 - val_mean_squared_error: 0.0022\n","Epoch 5/50\n","30/30 [==============================] - 0s 11ms/step - loss: 4.3068e-04 - mean_squared_error: 4.3068e-04 - val_loss: 0.0031 - val_mean_squared_error: 0.0031\n","Epoch 6/50\n","30/30 [==============================] - 0s 10ms/step - loss: 3.9818e-04 - mean_squared_error: 3.9818e-04 - val_loss: 0.0015 - val_mean_squared_error: 0.0015\n","Epoch 7/50\n","30/30 [==============================] - 0s 11ms/step - loss: 3.5637e-04 - mean_squared_error: 3.5637e-04 - val_loss: 6.0308e-04 - val_mean_squared_error: 6.0308e-04\n","Epoch 8/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.7260e-04 - mean_squared_error: 4.7260e-04 - val_loss: 0.0039 - val_mean_squared_error: 0.0039\n","Epoch 9/50\n","30/30 [==============================] - 0s 11ms/step - loss: 4.9455e-04 - mean_squared_error: 4.9455e-04 - val_loss: 0.0024 - val_mean_squared_error: 0.0024\n","Epoch 10/50\n","30/30 [==============================] - 0s 10ms/step - loss: 4.7734e-04 - mean_squared_error: 4.7734e-04 - val_loss: 0.0032 - val_mean_squared_error: 0.0032\n","Epoch 11/50\n","30/30 [==============================] - 0s 11ms/step - loss: 3.4894e-04 - mean_squared_error: 3.4894e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 12/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.8917e-04 - mean_squared_error: 2.8917e-04 - val_loss: 6.6742e-04 - val_mean_squared_error: 6.6742e-04\n","Epoch 13/50\n","30/30 [==============================] - 0s 9ms/step - loss: 2.9409e-04 - mean_squared_error: 2.9409e-04 - val_loss: 0.0015 - val_mean_squared_error: 0.0015\n","Epoch 14/50\n","30/30 [==============================] - 0s 10ms/step - loss: 3.0140e-04 - mean_squared_error: 3.0140e-04 - val_loss: 0.0016 - val_mean_squared_error: 0.0016\n","Epoch 15/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.7101e-04 - mean_squared_error: 2.7101e-04 - val_loss: 7.1668e-04 - val_mean_squared_error: 7.1668e-04\n","Epoch 16/50\n","30/30 [==============================] - 0s 11ms/step - loss: 2.5851e-04 - mean_squared_error: 2.5851e-04 - val_loss: 3.4204e-04 - val_mean_squared_error: 3.4204e-04\n","Epoch 17/50\n","30/30 [==============================] - 0s 9ms/step - loss: 2.6511e-04 - mean_squared_error: 2.6511e-04 - val_loss: 0.0015 - val_mean_squared_error: 0.0015\n","Epoch 18/50\n","30/30 [==============================] - 0s 10ms/step - loss: 3.0364e-04 - mean_squared_error: 3.0364e-04 - val_loss: 3.1107e-04 - val_mean_squared_error: 3.1107e-04\n","Epoch 19/50\n","30/30 [==============================] - 0s 10ms/step - loss: 2.4470e-04 - mean_squared_error: 2.4470e-04 - val_loss: 5.0771e-04 - val_mean_squared_error: 5.0771e-04\n","Epoch 20/50\n","30/30 [==============================] - 0s 14ms/step - loss: 2.1782e-04 - mean_squared_error: 2.1782e-04 - val_loss: 0.0012 - val_mean_squared_error: 0.0012\n","Epoch 21/50\n","30/30 [==============================] - 0s 14ms/step - loss: 2.4068e-04 - mean_squared_error: 2.4068e-04 - val_loss: 4.4204e-04 - val_mean_squared_error: 4.4204e-04\n","Epoch 22/50\n","30/30 [==============================] - 0s 13ms/step - loss: 2.2700e-04 - mean_squared_error: 2.2700e-04 - val_loss: 9.1750e-04 - val_mean_squared_error: 9.1750e-04\n","Epoch 23/50\n","30/30 [==============================] - 0s 14ms/step - loss: 2.1352e-04 - mean_squared_error: 2.1352e-04 - val_loss: 3.5500e-04 - val_mean_squared_error: 3.5500e-04\n","Epoch 24/50\n","30/30 [==============================] - 0s 14ms/step - loss: 2.2660e-04 - mean_squared_error: 2.2660e-04 - val_loss: 4.3847e-04 - val_mean_squared_error: 4.3847e-04\n","Epoch 25/50\n","30/30 [==============================] - 0s 13ms/step - loss: 1.9439e-04 - mean_squared_error: 1.9439e-04 - val_loss: 3.1093e-04 - val_mean_squared_error: 3.1093e-04\n","Epoch 26/50\n","30/30 [==============================] - 0s 15ms/step - loss: 2.0437e-04 - mean_squared_error: 2.0437e-04 - val_loss: 0.0016 - val_mean_squared_error: 0.0016\n","Epoch 27/50\n","30/30 [==============================] - 0s 14ms/step - loss: 1.7286e-04 - mean_squared_error: 1.7286e-04 - val_loss: 0.0012 - val_mean_squared_error: 0.0012\n","Epoch 28/50\n","30/30 [==============================] - 0s 13ms/step - loss: 1.7492e-04 - mean_squared_error: 1.7492e-04 - val_loss: 9.9492e-04 - val_mean_squared_error: 9.9492e-04\n","Epoch 29/50\n","30/30 [==============================] - 0s 15ms/step - loss: 1.6174e-04 - mean_squared_error: 1.6174e-04 - val_loss: 0.0023 - val_mean_squared_error: 0.0023\n","Epoch 30/50\n","30/30 [==============================] - 0s 12ms/step - loss: 1.8533e-04 - mean_squared_error: 1.8533e-04 - val_loss: 7.6117e-04 - val_mean_squared_error: 7.6117e-04\n","Epoch 31/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.9777e-04 - mean_squared_error: 1.9777e-04 - val_loss: 2.4543e-04 - val_mean_squared_error: 2.4543e-04\n","Epoch 32/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.7378e-04 - mean_squared_error: 1.7378e-04 - val_loss: 0.0011 - val_mean_squared_error: 0.0011\n","Epoch 33/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.7490e-04 - mean_squared_error: 1.7490e-04 - val_loss: 5.9112e-04 - val_mean_squared_error: 5.9112e-04\n","Epoch 34/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.5190e-04 - mean_squared_error: 1.5190e-04 - val_loss: 2.5604e-04 - val_mean_squared_error: 2.5604e-04\n","Epoch 35/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.9276e-04 - mean_squared_error: 1.9276e-04 - val_loss: 0.0010 - val_mean_squared_error: 0.0010\n","Epoch 36/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.6427e-04 - mean_squared_error: 1.6427e-04 - val_loss: 5.3285e-04 - val_mean_squared_error: 5.3285e-04\n","Epoch 37/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.5344e-04 - mean_squared_error: 1.5344e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 38/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.5004e-04 - mean_squared_error: 1.5004e-04 - val_loss: 0.0027 - val_mean_squared_error: 0.0027\n","Epoch 39/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.8476e-04 - mean_squared_error: 1.8476e-04 - val_loss: 9.3740e-04 - val_mean_squared_error: 9.3740e-04\n","Epoch 40/50\n","30/30 [==============================] - 0s 9ms/step - loss: 1.7144e-04 - mean_squared_error: 1.7144e-04 - val_loss: 0.0015 - val_mean_squared_error: 0.0015\n","Epoch 41/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.5736e-04 - mean_squared_error: 1.5736e-04 - val_loss: 7.3845e-04 - val_mean_squared_error: 7.3845e-04\n","Epoch 42/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.6148e-04 - mean_squared_error: 1.6148e-04 - val_loss: 3.1969e-04 - val_mean_squared_error: 3.1969e-04\n","Epoch 43/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.3151e-04 - mean_squared_error: 1.3151e-04 - val_loss: 5.5368e-04 - val_mean_squared_error: 5.5368e-04\n","Epoch 44/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.2884e-04 - mean_squared_error: 1.2884e-04 - val_loss: 2.6105e-04 - val_mean_squared_error: 2.6105e-04\n","Epoch 45/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.3772e-04 - mean_squared_error: 1.3772e-04 - val_loss: 4.7185e-04 - val_mean_squared_error: 4.7185e-04\n","Epoch 46/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.5631e-04 - mean_squared_error: 1.5631e-04 - val_loss: 0.0014 - val_mean_squared_error: 0.0014\n","Epoch 47/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.5411e-04 - mean_squared_error: 1.5411e-04 - val_loss: 0.0011 - val_mean_squared_error: 0.0011\n","Epoch 48/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.2760e-04 - mean_squared_error: 1.2760e-04 - val_loss: 2.9881e-04 - val_mean_squared_error: 2.9881e-04\n","Epoch 49/50\n","30/30 [==============================] - 0s 10ms/step - loss: 1.2668e-04 - mean_squared_error: 1.2668e-04 - val_loss: 0.0013 - val_mean_squared_error: 0.0013\n","Epoch 50/50\n","30/30 [==============================] - 0s 11ms/step - loss: 1.4801e-04 - mean_squared_error: 1.4801e-04 - val_loss: 8.9080e-04 - val_mean_squared_error: 8.9080e-04\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7e9dfc51d240>"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["Make predictions on data set\n"],"metadata":{"id":"NPQgBvZalY8_"}},{"cell_type":"code","source":["SAVE = True\n","LSTM_MODEL_PATH = \"/content/drive/Shareddrives/1:1_Krishna_Vijay/Results/\"\n","\n","# save the model if needed\n","if SAVE:\n","    model.save(os.path.join(LSTM_MODEL_PATH, f\"best_model_{COMPANY}.h5\"))\n","    print(\"Model is saved\")"],"metadata":{"id":"VbtqG0m6ktZ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715832140041,"user_tz":420,"elapsed":479,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"575cca67-3610-4c47-b10e-6350c29f0e05"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model is saved\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]}]},{"cell_type":"code","source":["# make predictions\n","predictions = model.predict(test_sequences)\n","# inverse tranform the predictions\n","inverse_predictions = scaler.inverse_transform(predictions)"],"metadata":{"id":"ABnKEKtCRJO0","colab":{"base_uri":"https://localhost:8080/","height":193},"executionInfo":{"status":"error","timestamp":1715832141087,"user_tz":420,"elapsed":1047,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}},"outputId":"8665e425-debc-45cc-fc5c-95e4e1174e95"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["7/7 [==============================] - 1s 4ms/step\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'scaler' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-81db6fcac81f>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_sequences\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# inverse tranform the predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0minverse_predictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'scaler' is not defined"]}]},{"cell_type":"code","source":["# create a dataframe frame using model predictions\n","PRED_COLUMNS = ['open_predicted','high_predicted','low_predicted','close_predicted']\n","# create the dataframe\n","pred_df = pd.concat([df.iloc[-predictions.shape[0]:], pd.DataFrame(inverse_predictions, columns = PRED_COLUMNS, index = df.iloc[-predictions.shape[0]:].index)], axis = 1)\n","pred_df[COLUMNS] = scaler.inverse_transform(pred_df[COLUMNS])\n","pred_df.head()"],"metadata":{"id":"ywlKctSNlrrr","executionInfo":{"status":"aborted","timestamp":1715832141088,"user_tz":420,"elapsed":4,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","\n","def evaluations(cols, dataframe = pred_df):\n","    for column in cols:\n","        print(\"{}\".format(column))\n","        pred_col = column.lower() + \"_predicted\"\n","        mse = mean_squared_error(dataframe[column].values, dataframe[pred_col].values)\n","        print(\"Max and Min: {} and {}\".format(dataframe[column].max(), dataframe[column].min()))\n","        print(\"MSE:\", mse)\n","        print(\"RMSE:{}\\n\".format(np.sqrt(mse)))\n","\n","        plt.figure(figsize = (10,6))\n","        plt.plot(dataframe[column], label = \"actual\")\n","        plt.plot(dataframe[pred_col], label = \"predicted\")\n","        plt.xlabel(\"Time\")\n","        plt.ylabel(f\"Actual and Predicted:{column}\")\n","        plt.title(f\"Actual and Predictions Comparison: {column}\")\n","        plt.legend(loc=\"best\")\n","        plt.grid(True)\n","        plt.show()\n","        print(\"\\n\\n\")"],"metadata":{"id":"INrXqRtmltT7","executionInfo":{"status":"aborted","timestamp":1715832141088,"user_tz":420,"elapsed":4,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# make evaluations\n","evaluations(COLUMNS)"],"metadata":{"id":"vA0msThclyJr","executionInfo":{"status":"aborted","timestamp":1715832141088,"user_tz":420,"elapsed":4,"user":{"displayName":"Vijay S","userId":"08723932588649379092"}}},"execution_count":null,"outputs":[]}]}